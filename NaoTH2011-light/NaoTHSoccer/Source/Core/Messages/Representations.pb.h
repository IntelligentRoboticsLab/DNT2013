// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Representations.proto

#ifndef PROTOBUF_Representations_2eproto__INCLUDED
#define PROTOBUF_Representations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonTypes.pb.h"
#include "Framework-Representations.pb.h"
// @@protoc_insertion_point(includes)

namespace naothmessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Representations_2eproto();
void protobuf_AssignDesc_Representations_2eproto();
void protobuf_ShutdownFile_Representations_2eproto();

class CameraMatrix;
class BallPercept;
class GoalPercept;
class HeadMotionRequest;
class StepControlRequest;
class WalkRequest;
class KickRequest;
class MotionRequest;
class LinePercept;
class ScanLineEndPoint;
class ScanLineEdgelPercept;
class StepControlStatus;
class MotionStatus;
class OdometryData;
class CalibrationData;
class InertialModel;

// ===================================================================

class CameraMatrix : public ::google::protobuf::Message {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();
  
  CameraMatrix(const CameraMatrix& from);
  
  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraMatrix& default_instance();
  
  void Swap(CameraMatrix* other);
  
  // implements Message ----------------------------------------------
  
  CameraMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.Pose3D pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::naothmessages::Pose3D& pose() const;
  inline ::naothmessages::Pose3D* mutable_pose();
  inline ::naothmessages::Pose3D* release_pose();
  
  // optional .naothmessages.CameraID cameraID = 2 [default = bottom];
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraIDFieldNumber = 2;
  inline naothmessages::CameraID cameraid() const;
  inline void set_cameraid(naothmessages::CameraID value);
  
  // optional bool valid = 3;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 3;
  inline bool valid() const;
  inline void set_valid(bool value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.CameraMatrix)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_valid();
  inline void clear_has_valid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::Pose3D* pose_;
  int cameraid_;
  bool valid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static CameraMatrix* default_instance_;
};
// -------------------------------------------------------------------

class BallPercept : public ::google::protobuf::Message {
 public:
  BallPercept();
  virtual ~BallPercept();
  
  BallPercept(const BallPercept& from);
  
  inline BallPercept& operator=(const BallPercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallPercept& default_instance();
  
  void Swap(BallPercept* other);
  
  // implements Message ----------------------------------------------
  
  BallPercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BallPercept& from);
  void MergeFrom(const BallPercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool ballWasSeen = 1;
  inline bool has_ballwasseen() const;
  inline void clear_ballwasseen();
  static const int kBallWasSeenFieldNumber = 1;
  inline bool ballwasseen() const;
  inline void set_ballwasseen(bool value);
  
  // optional .naothmessages.DoubleVector2 centerInImage = 2;
  inline bool has_centerinimage() const;
  inline void clear_centerinimage();
  static const int kCenterInImageFieldNumber = 2;
  inline const ::naothmessages::DoubleVector2& centerinimage() const;
  inline ::naothmessages::DoubleVector2* mutable_centerinimage();
  inline ::naothmessages::DoubleVector2* release_centerinimage();
  
  // optional double radiusInImage = 3;
  inline bool has_radiusinimage() const;
  inline void clear_radiusinimage();
  static const int kRadiusInImageFieldNumber = 3;
  inline double radiusinimage() const;
  inline void set_radiusinimage(double value);
  
  // optional .naothmessages.Color ballColor = 4;
  inline bool has_ballcolor() const;
  inline void clear_ballcolor();
  static const int kBallColorFieldNumber = 4;
  inline naothmessages::Color ballcolor() const;
  inline void set_ballcolor(naothmessages::Color value);
  
  // optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
  inline bool has_bearingbasedoffsetonfield() const;
  inline void clear_bearingbasedoffsetonfield();
  static const int kBearingBasedOffsetOnFieldFieldNumber = 5;
  inline const ::naothmessages::DoubleVector2& bearingbasedoffsetonfield() const;
  inline ::naothmessages::DoubleVector2* mutable_bearingbasedoffsetonfield();
  inline ::naothmessages::DoubleVector2* release_bearingbasedoffsetonfield();
  
  // optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
  inline bool has_frameinfowhenballwasseen() const;
  inline void clear_frameinfowhenballwasseen();
  static const int kFrameInfoWhenBallWasSeenFieldNumber = 6;
  inline const ::naothmessages::FrameInfo& frameinfowhenballwasseen() const;
  inline ::naothmessages::FrameInfo* mutable_frameinfowhenballwasseen();
  inline ::naothmessages::FrameInfo* release_frameinfowhenballwasseen();
  
  // @@protoc_insertion_point(class_scope:naothmessages.BallPercept)
 private:
  inline void set_has_ballwasseen();
  inline void clear_has_ballwasseen();
  inline void set_has_centerinimage();
  inline void clear_has_centerinimage();
  inline void set_has_radiusinimage();
  inline void clear_has_radiusinimage();
  inline void set_has_ballcolor();
  inline void clear_has_ballcolor();
  inline void set_has_bearingbasedoffsetonfield();
  inline void clear_has_bearingbasedoffsetonfield();
  inline void set_has_frameinfowhenballwasseen();
  inline void clear_has_frameinfowhenballwasseen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::DoubleVector2* centerinimage_;
  bool ballwasseen_;
  int ballcolor_;
  double radiusinimage_;
  ::naothmessages::DoubleVector2* bearingbasedoffsetonfield_;
  ::naothmessages::FrameInfo* frameinfowhenballwasseen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static BallPercept* default_instance_;
};
// -------------------------------------------------------------------

class GoalPercept : public ::google::protobuf::Message {
 public:
  GoalPercept();
  virtual ~GoalPercept();
  
  GoalPercept(const GoalPercept& from);
  
  inline GoalPercept& operator=(const GoalPercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalPercept& default_instance();
  
  void Swap(GoalPercept* other);
  
  // implements Message ----------------------------------------------
  
  GoalPercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoalPercept& from);
  void MergeFrom(const GoalPercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double angleToSeenGoal = 1;
  inline bool has_angletoseengoal() const;
  inline void clear_angletoseengoal();
  static const int kAngleToSeenGoalFieldNumber = 1;
  inline double angletoseengoal() const;
  inline void set_angletoseengoal(double value);
  
  // optional .naothmessages.DoubleVector3 goalCentroid = 2;
  inline bool has_goalcentroid() const;
  inline void clear_goalcentroid();
  static const int kGoalCentroidFieldNumber = 2;
  inline const ::naothmessages::DoubleVector3& goalcentroid() const;
  inline ::naothmessages::DoubleVector3* mutable_goalcentroid();
  inline ::naothmessages::DoubleVector3* release_goalcentroid();
  
  // optional int32 numberOfSeenPosts = 3;
  inline bool has_numberofseenposts() const;
  inline void clear_numberofseenposts();
  static const int kNumberOfSeenPostsFieldNumber = 3;
  inline ::google::protobuf::int32 numberofseenposts() const;
  inline void set_numberofseenposts(::google::protobuf::int32 value);
  
  // repeated .naothmessages.GoalPost post = 4;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 4;
  inline const ::naothmessages::GoalPost& post(int index) const;
  inline ::naothmessages::GoalPost* mutable_post(int index);
  inline ::naothmessages::GoalPost* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >*
      mutable_post();
  
  // @@protoc_insertion_point(class_scope:naothmessages.GoalPercept)
 private:
  inline void set_has_angletoseengoal();
  inline void clear_has_angletoseengoal();
  inline void set_has_goalcentroid();
  inline void clear_has_goalcentroid();
  inline void set_has_numberofseenposts();
  inline void clear_has_numberofseenposts();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double angletoseengoal_;
  ::naothmessages::DoubleVector3* goalcentroid_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost > post_;
  ::google::protobuf::int32 numberofseenposts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static GoalPercept* default_instance_;
};
// -------------------------------------------------------------------

class HeadMotionRequest : public ::google::protobuf::Message {
 public:
  HeadMotionRequest();
  virtual ~HeadMotionRequest();
  
  HeadMotionRequest(const HeadMotionRequest& from);
  
  inline HeadMotionRequest& operator=(const HeadMotionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeadMotionRequest& default_instance();
  
  void Swap(HeadMotionRequest* other);
  
  // implements Message ----------------------------------------------
  
  HeadMotionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeadMotionRequest& from);
  void MergeFrom(const HeadMotionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 cameraID = 2;
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraIDFieldNumber = 2;
  inline ::google::protobuf::uint32 cameraid() const;
  inline void set_cameraid(::google::protobuf::uint32 value);
  
  // optional .naothmessages.DoubleVector2 targetJointPosition = 3;
  inline bool has_targetjointposition() const;
  inline void clear_targetjointposition();
  static const int kTargetJointPositionFieldNumber = 3;
  inline const ::naothmessages::DoubleVector2& targetjointposition() const;
  inline ::naothmessages::DoubleVector2* mutable_targetjointposition();
  inline ::naothmessages::DoubleVector2* release_targetjointposition();
  
  // optional .naothmessages.DoubleVector2 targetPointInImage = 4;
  inline bool has_targetpointinimage() const;
  inline void clear_targetpointinimage();
  static const int kTargetPointInImageFieldNumber = 4;
  inline const ::naothmessages::DoubleVector2& targetpointinimage() const;
  inline ::naothmessages::DoubleVector2* mutable_targetpointinimage();
  inline ::naothmessages::DoubleVector2* release_targetpointinimage();
  
  // optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
  inline bool has_targetpointintheworld() const;
  inline void clear_targetpointintheworld();
  static const int kTargetPointInTheWorldFieldNumber = 5;
  inline const ::naothmessages::DoubleVector3& targetpointintheworld() const;
  inline ::naothmessages::DoubleVector3* mutable_targetpointintheworld();
  inline ::naothmessages::DoubleVector3* release_targetpointintheworld();
  
  // optional .naothmessages.DoubleVector3 searchCenter = 6;
  inline bool has_searchcenter() const;
  inline void clear_searchcenter();
  static const int kSearchCenterFieldNumber = 6;
  inline const ::naothmessages::DoubleVector3& searchcenter() const;
  inline ::naothmessages::DoubleVector3* mutable_searchcenter();
  inline ::naothmessages::DoubleVector3* release_searchcenter();
  
  // optional .naothmessages.DoubleVector3 searchSize = 7;
  inline bool has_searchsize() const;
  inline void clear_searchsize();
  static const int kSearchSizeFieldNumber = 7;
  inline const ::naothmessages::DoubleVector3& searchsize() const;
  inline ::naothmessages::DoubleVector3* mutable_searchsize();
  inline ::naothmessages::DoubleVector3* release_searchsize();
  
  // optional bool searchDirection = 8;
  inline bool has_searchdirection() const;
  inline void clear_searchdirection();
  static const int kSearchDirectionFieldNumber = 8;
  inline bool searchdirection() const;
  inline void set_searchdirection(bool value);
  
  // optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
  inline bool has_targetpointontheground() const;
  inline void clear_targetpointontheground();
  static const int kTargetPointOnTheGroundFieldNumber = 9;
  inline const ::naothmessages::DoubleVector2& targetpointontheground() const;
  inline ::naothmessages::DoubleVector2* mutable_targetpointontheground();
  inline ::naothmessages::DoubleVector2* release_targetpointontheground();
  
  // optional uint32 coordinate = 10;
  inline bool has_coordinate() const;
  inline void clear_coordinate();
  static const int kCoordinateFieldNumber = 10;
  inline ::google::protobuf::uint32 coordinate() const;
  inline void set_coordinate(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.HeadMotionRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_targetjointposition();
  inline void clear_has_targetjointposition();
  inline void set_has_targetpointinimage();
  inline void clear_has_targetpointinimage();
  inline void set_has_targetpointintheworld();
  inline void clear_has_targetpointintheworld();
  inline void set_has_searchcenter();
  inline void clear_has_searchcenter();
  inline void set_has_searchsize();
  inline void clear_has_searchsize();
  inline void set_has_searchdirection();
  inline void clear_has_searchdirection();
  inline void set_has_targetpointontheground();
  inline void clear_has_targetpointontheground();
  inline void set_has_coordinate();
  inline void clear_has_coordinate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cameraid_;
  ::naothmessages::DoubleVector2* targetjointposition_;
  ::naothmessages::DoubleVector2* targetpointinimage_;
  ::naothmessages::DoubleVector3* targetpointintheworld_;
  ::naothmessages::DoubleVector3* searchcenter_;
  ::naothmessages::DoubleVector3* searchsize_;
  ::naothmessages::DoubleVector2* targetpointontheground_;
  bool searchdirection_;
  ::google::protobuf::uint32 coordinate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static HeadMotionRequest* default_instance_;
};
// -------------------------------------------------------------------

class StepControlRequest : public ::google::protobuf::Message {
 public:
  StepControlRequest();
  virtual ~StepControlRequest();
  
  StepControlRequest(const StepControlRequest& from);
  
  inline StepControlRequest& operator=(const StepControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StepControlRequest& default_instance();
  
  void Swap(StepControlRequest* other);
  
  // implements Message ----------------------------------------------
  
  StepControlRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StepControlRequest& from);
  void MergeFrom(const StepControlRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 stepID = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);
  
  // required bool moveLeftFoot = 2;
  inline bool has_moveleftfoot() const;
  inline void clear_moveleftfoot();
  static const int kMoveLeftFootFieldNumber = 2;
  inline bool moveleftfoot() const;
  inline void set_moveleftfoot(bool value);
  
  // required .naothmessages.Pose2D target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::naothmessages::Pose2D& target() const;
  inline ::naothmessages::Pose2D* mutable_target();
  inline ::naothmessages::Pose2D* release_target();
  
  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required double speedDirection = 5;
  inline bool has_speeddirection() const;
  inline void clear_speeddirection();
  static const int kSpeedDirectionFieldNumber = 5;
  inline double speeddirection() const;
  inline void set_speeddirection(double value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.StepControlRequest)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_moveleftfoot();
  inline void clear_has_moveleftfoot();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_speeddirection();
  inline void clear_has_speeddirection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 stepid_;
  bool moveleftfoot_;
  ::naothmessages::Pose2D* target_;
  double speeddirection_;
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static StepControlRequest* default_instance_;
};
// -------------------------------------------------------------------

class WalkRequest : public ::google::protobuf::Message {
 public:
  WalkRequest();
  virtual ~WalkRequest();
  
  WalkRequest(const WalkRequest& from);
  
  inline WalkRequest& operator=(const WalkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WalkRequest& default_instance();
  
  void Swap(WalkRequest* other);
  
  // implements Message ----------------------------------------------
  
  WalkRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WalkRequest& from);
  void MergeFrom(const WalkRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 coordinate = 1;
  inline bool has_coordinate() const;
  inline void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  inline ::google::protobuf::uint32 coordinate() const;
  inline void set_coordinate(::google::protobuf::uint32 value);
  
  // required double character = 2;
  inline bool has_character() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 2;
  inline double character() const;
  inline void set_character(double value);
  
  // required .naothmessages.Pose2D target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::naothmessages::Pose2D& target() const;
  inline ::naothmessages::Pose2D* mutable_target();
  inline ::naothmessages::Pose2D* release_target();
  
  // optional .naothmessages.StepControlRequest stepControl = 4;
  inline bool has_stepcontrol() const;
  inline void clear_stepcontrol();
  static const int kStepControlFieldNumber = 4;
  inline const ::naothmessages::StepControlRequest& stepcontrol() const;
  inline ::naothmessages::StepControlRequest* mutable_stepcontrol();
  inline ::naothmessages::StepControlRequest* release_stepcontrol();
  
  // required .naothmessages.Pose2D offset = 5;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 5;
  inline const ::naothmessages::Pose2D& offset() const;
  inline ::naothmessages::Pose2D* mutable_offset();
  inline ::naothmessages::Pose2D* release_offset();
  
  // @@protoc_insertion_point(class_scope:naothmessages.WalkRequest)
 private:
  inline void set_has_coordinate();
  inline void clear_has_coordinate();
  inline void set_has_character();
  inline void clear_has_character();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_stepcontrol();
  inline void clear_has_stepcontrol();
  inline void set_has_offset();
  inline void clear_has_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double character_;
  ::naothmessages::Pose2D* target_;
  ::naothmessages::StepControlRequest* stepcontrol_;
  ::naothmessages::Pose2D* offset_;
  ::google::protobuf::uint32 coordinate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static WalkRequest* default_instance_;
};
// -------------------------------------------------------------------

class KickRequest : public ::google::protobuf::Message {
 public:
  KickRequest();
  virtual ~KickRequest();
  
  KickRequest(const KickRequest& from);
  
  inline KickRequest& operator=(const KickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickRequest& default_instance();
  
  void Swap(KickRequest* other);
  
  // implements Message ----------------------------------------------
  
  KickRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickRequest& from);
  void MergeFrom(const KickRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.DoubleVector3 kickPoint = 1;
  inline bool has_kickpoint() const;
  inline void clear_kickpoint();
  static const int kKickPointFieldNumber = 1;
  inline const ::naothmessages::DoubleVector3& kickpoint() const;
  inline ::naothmessages::DoubleVector3* mutable_kickpoint();
  inline ::naothmessages::DoubleVector3* release_kickpoint();
  
  // required double kickDirection = 2;
  inline bool has_kickdirection() const;
  inline void clear_kickdirection();
  static const int kKickDirectionFieldNumber = 2;
  inline double kickdirection() const;
  inline void set_kickdirection(double value);
  
  // required int32 kickFoot = 3;
  inline bool has_kickfoot() const;
  inline void clear_kickfoot();
  static const int kKickFootFieldNumber = 3;
  inline ::google::protobuf::int32 kickfoot() const;
  inline void set_kickfoot(::google::protobuf::int32 value);
  
  // required bool finishKick = 4;
  inline bool has_finishkick() const;
  inline void clear_finishkick();
  static const int kFinishKickFieldNumber = 4;
  inline bool finishkick() const;
  inline void set_finishkick(bool value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.KickRequest)
 private:
  inline void set_has_kickpoint();
  inline void clear_has_kickpoint();
  inline void set_has_kickdirection();
  inline void clear_has_kickdirection();
  inline void set_has_kickfoot();
  inline void clear_has_kickfoot();
  inline void set_has_finishkick();
  inline void clear_has_finishkick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::DoubleVector3* kickpoint_;
  double kickdirection_;
  ::google::protobuf::int32 kickfoot_;
  bool finishkick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static KickRequest* default_instance_;
};
// -------------------------------------------------------------------

class MotionRequest : public ::google::protobuf::Message {
 public:
  MotionRequest();
  virtual ~MotionRequest();
  
  MotionRequest(const MotionRequest& from);
  
  inline MotionRequest& operator=(const MotionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionRequest& default_instance();
  
  void Swap(MotionRequest* other);
  
  // implements Message ----------------------------------------------
  
  MotionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionRequest& from);
  void MergeFrom(const MotionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required bool forced = 3;
  inline bool has_forced() const;
  inline void clear_forced();
  static const int kForcedFieldNumber = 3;
  inline bool forced() const;
  inline void set_forced(bool value);
  
  // optional .naothmessages.WalkRequest walkRequest = 4;
  inline bool has_walkrequest() const;
  inline void clear_walkrequest();
  static const int kWalkRequestFieldNumber = 4;
  inline const ::naothmessages::WalkRequest& walkrequest() const;
  inline ::naothmessages::WalkRequest* mutable_walkrequest();
  inline ::naothmessages::WalkRequest* release_walkrequest();
  
  // optional bool starndardStand = 5;
  inline bool has_starndardstand() const;
  inline void clear_starndardstand();
  static const int kStarndardStandFieldNumber = 5;
  inline bool starndardstand() const;
  inline void set_starndardstand(bool value);
  
  // optional .naothmessages.KickRequest kickRequest = 6;
  inline bool has_kickrequest() const;
  inline void clear_kickrequest();
  static const int kKickRequestFieldNumber = 6;
  inline const ::naothmessages::KickRequest& kickrequest() const;
  inline ::naothmessages::KickRequest* mutable_kickrequest();
  inline ::naothmessages::KickRequest* release_kickrequest();
  
  // optional double standHeight = 7;
  inline bool has_standheight() const;
  inline void clear_standheight();
  static const int kStandHeightFieldNumber = 7;
  inline double standheight() const;
  inline void set_standheight(double value);
  
  // optional bool calibrateFootTouchDetector = 8;
  inline bool has_calibratefoottouchdetector() const;
  inline void clear_calibratefoottouchdetector();
  static const int kCalibrateFootTouchDetectorFieldNumber = 8;
  inline bool calibratefoottouchdetector() const;
  inline void set_calibratefoottouchdetector(bool value);
  
  // optional uint32 cognitionFrameNumber = 9;
  inline bool has_cognitionframenumber() const;
  inline void clear_cognitionframenumber();
  static const int kCognitionFrameNumberFieldNumber = 9;
  inline ::google::protobuf::uint32 cognitionframenumber() const;
  inline void set_cognitionframenumber(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.MotionRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_forced();
  inline void clear_has_forced();
  inline void set_has_walkrequest();
  inline void clear_has_walkrequest();
  inline void set_has_starndardstand();
  inline void clear_has_starndardstand();
  inline void set_has_kickrequest();
  inline void clear_has_kickrequest();
  inline void set_has_standheight();
  inline void clear_has_standheight();
  inline void set_has_calibratefoottouchdetector();
  inline void clear_has_calibratefoottouchdetector();
  inline void set_has_cognitionframenumber();
  inline void clear_has_cognitionframenumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::naothmessages::WalkRequest* walkrequest_;
  ::naothmessages::KickRequest* kickrequest_;
  bool forced_;
  bool starndardstand_;
  bool calibratefoottouchdetector_;
  ::google::protobuf::uint32 cognitionframenumber_;
  double standheight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static MotionRequest* default_instance_;
};
// -------------------------------------------------------------------

class LinePercept : public ::google::protobuf::Message {
 public:
  LinePercept();
  virtual ~LinePercept();
  
  LinePercept(const LinePercept& from);
  
  inline LinePercept& operator=(const LinePercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinePercept& default_instance();
  
  void Swap(LinePercept* other);
  
  // implements Message ----------------------------------------------
  
  LinePercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinePercept& from);
  void MergeFrom(const LinePercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .naothmessages.FieldLineSegment lines = 1;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 1;
  inline const ::naothmessages::FieldLineSegment& lines(int index) const;
  inline ::naothmessages::FieldLineSegment* mutable_lines(int index);
  inline ::naothmessages::FieldLineSegment* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >*
      mutable_lines();
  
  // repeated .naothmessages.Intersection intersections = 2;
  inline int intersections_size() const;
  inline void clear_intersections();
  static const int kIntersectionsFieldNumber = 2;
  inline const ::naothmessages::Intersection& intersections(int index) const;
  inline ::naothmessages::Intersection* mutable_intersections(int index);
  inline ::naothmessages::Intersection* add_intersections();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >&
      intersections() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >*
      mutable_intersections();
  
  // optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
  inline bool has_middlecirclecenter() const;
  inline void clear_middlecirclecenter();
  static const int kMiddleCircleCenterFieldNumber = 3;
  inline const ::naothmessages::DoubleVector2& middlecirclecenter() const;
  inline ::naothmessages::DoubleVector2* mutable_middlecirclecenter();
  inline ::naothmessages::DoubleVector2* release_middlecirclecenter();
  
  // @@protoc_insertion_point(class_scope:naothmessages.LinePercept)
 private:
  inline void set_has_middlecirclecenter();
  inline void clear_has_middlecirclecenter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment > lines_;
  ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection > intersections_;
  ::naothmessages::DoubleVector2* middlecirclecenter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static LinePercept* default_instance_;
};
// -------------------------------------------------------------------

class ScanLineEndPoint : public ::google::protobuf::Message {
 public:
  ScanLineEndPoint();
  virtual ~ScanLineEndPoint();
  
  ScanLineEndPoint(const ScanLineEndPoint& from);
  
  inline ScanLineEndPoint& operator=(const ScanLineEndPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanLineEndPoint& default_instance();
  
  void Swap(ScanLineEndPoint* other);
  
  // implements Message ----------------------------------------------
  
  ScanLineEndPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanLineEndPoint& from);
  void MergeFrom(const ScanLineEndPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.IntVector2 posInImage = 1;
  inline bool has_posinimage() const;
  inline void clear_posinimage();
  static const int kPosInImageFieldNumber = 1;
  inline const ::naothmessages::IntVector2& posinimage() const;
  inline ::naothmessages::IntVector2* mutable_posinimage();
  inline ::naothmessages::IntVector2* release_posinimage();
  
  // required .naothmessages.DoubleVector2 posOnField = 2;
  inline bool has_posonfield() const;
  inline void clear_posonfield();
  static const int kPosOnFieldFieldNumber = 2;
  inline const ::naothmessages::DoubleVector2& posonfield() const;
  inline ::naothmessages::DoubleVector2* mutable_posonfield();
  inline ::naothmessages::DoubleVector2* release_posonfield();
  
  // required .naothmessages.Color color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline naothmessages::Color color() const;
  inline void set_color(naothmessages::Color value);
  
  // required uint32 ScanLineID = 4;
  inline bool has_scanlineid() const;
  inline void clear_scanlineid();
  static const int kScanLineIDFieldNumber = 4;
  inline ::google::protobuf::uint32 scanlineid() const;
  inline void set_scanlineid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.ScanLineEndPoint)
 private:
  inline void set_has_posinimage();
  inline void clear_has_posinimage();
  inline void set_has_posonfield();
  inline void clear_has_posonfield();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_scanlineid();
  inline void clear_has_scanlineid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::IntVector2* posinimage_;
  ::naothmessages::DoubleVector2* posonfield_;
  int color_;
  ::google::protobuf::uint32 scanlineid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static ScanLineEndPoint* default_instance_;
};
// -------------------------------------------------------------------

class ScanLineEdgelPercept : public ::google::protobuf::Message {
 public:
  ScanLineEdgelPercept();
  virtual ~ScanLineEdgelPercept();
  
  ScanLineEdgelPercept(const ScanLineEdgelPercept& from);
  
  inline ScanLineEdgelPercept& operator=(const ScanLineEdgelPercept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanLineEdgelPercept& default_instance();
  
  void Swap(ScanLineEdgelPercept* other);
  
  // implements Message ----------------------------------------------
  
  ScanLineEdgelPercept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanLineEdgelPercept& from);
  void MergeFrom(const ScanLineEdgelPercept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .naothmessages.ScanLineEndPoint endPoints = 2;
  inline int endpoints_size() const;
  inline void clear_endpoints();
  static const int kEndPointsFieldNumber = 2;
  inline const ::naothmessages::ScanLineEndPoint& endpoints(int index) const;
  inline ::naothmessages::ScanLineEndPoint* mutable_endpoints(int index);
  inline ::naothmessages::ScanLineEndPoint* add_endpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint >&
      endpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint >*
      mutable_endpoints();
  
  // @@protoc_insertion_point(class_scope:naothmessages.ScanLineEdgelPercept)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint > endpoints_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static ScanLineEdgelPercept* default_instance_;
};
// -------------------------------------------------------------------

class StepControlStatus : public ::google::protobuf::Message {
 public:
  StepControlStatus();
  virtual ~StepControlStatus();
  
  StepControlStatus(const StepControlStatus& from);
  
  inline StepControlStatus& operator=(const StepControlStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StepControlStatus& default_instance();
  
  void Swap(StepControlStatus* other);
  
  // implements Message ----------------------------------------------
  
  StepControlStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StepControlStatus& from);
  void MergeFrom(const StepControlStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 stepID = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);
  
  // required uint32 moveableFoot = 2;
  inline bool has_moveablefoot() const;
  inline void clear_moveablefoot();
  static const int kMoveableFootFieldNumber = 2;
  inline ::google::protobuf::uint32 moveablefoot() const;
  inline void set_moveablefoot(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:naothmessages.StepControlStatus)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_moveablefoot();
  inline void clear_has_moveablefoot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 stepid_;
  ::google::protobuf::uint32 moveablefoot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static StepControlStatus* default_instance_;
};
// -------------------------------------------------------------------

class MotionStatus : public ::google::protobuf::Message {
 public:
  MotionStatus();
  virtual ~MotionStatus();
  
  MotionStatus(const MotionStatus& from);
  
  inline MotionStatus& operator=(const MotionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionStatus& default_instance();
  
  void Swap(MotionStatus* other);
  
  // implements Message ----------------------------------------------
  
  MotionStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionStatus& from);
  void MergeFrom(const MotionStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required uint32 lastMotion = 2;
  inline bool has_lastmotion() const;
  inline void clear_lastmotion();
  static const int kLastMotionFieldNumber = 2;
  inline ::google::protobuf::uint32 lastmotion() const;
  inline void set_lastmotion(::google::protobuf::uint32 value);
  
  // required uint32 currentMotion = 3;
  inline bool has_currentmotion() const;
  inline void clear_currentmotion();
  static const int kCurrentMotionFieldNumber = 3;
  inline ::google::protobuf::uint32 currentmotion() const;
  inline void set_currentmotion(::google::protobuf::uint32 value);
  
  // required uint32 headMotion = 4;
  inline bool has_headmotion() const;
  inline void clear_headmotion();
  static const int kHeadMotionFieldNumber = 4;
  inline ::google::protobuf::uint32 headmotion() const;
  inline void set_headmotion(::google::protobuf::uint32 value);
  
  // required uint32 currentMotionState = 5;
  inline bool has_currentmotionstate() const;
  inline void clear_currentmotionstate();
  static const int kCurrentMotionStateFieldNumber = 5;
  inline ::google::protobuf::uint32 currentmotionstate() const;
  inline void set_currentmotionstate(::google::protobuf::uint32 value);
  
  // required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
  inline bool has_plannedmotionleftfoot() const;
  inline void clear_plannedmotionleftfoot();
  static const int kPlannedMotionLeftFootFieldNumber = 6;
  inline const ::naothmessages::Pose2D& plannedmotionleftfoot() const;
  inline ::naothmessages::Pose2D* mutable_plannedmotionleftfoot();
  inline ::naothmessages::Pose2D* release_plannedmotionleftfoot();
  
  // required .naothmessages.Pose2D plannedMotionRightFoot = 7;
  inline bool has_plannedmotionrightfoot() const;
  inline void clear_plannedmotionrightfoot();
  static const int kPlannedMotionRightFootFieldNumber = 7;
  inline const ::naothmessages::Pose2D& plannedmotionrightfoot() const;
  inline ::naothmessages::Pose2D* mutable_plannedmotionrightfoot();
  inline ::naothmessages::Pose2D* release_plannedmotionrightfoot();
  
  // required .naothmessages.Pose2D plannedMotionHip = 8;
  inline bool has_plannedmotionhip() const;
  inline void clear_plannedmotionhip();
  static const int kPlannedMotionHipFieldNumber = 8;
  inline const ::naothmessages::Pose2D& plannedmotionhip() const;
  inline ::naothmessages::Pose2D* mutable_plannedmotionhip();
  inline ::naothmessages::Pose2D* release_plannedmotionhip();
  
  // optional .naothmessages.StepControlStatus stepControlStatus = 9;
  inline bool has_stepcontrolstatus() const;
  inline void clear_stepcontrolstatus();
  static const int kStepControlStatusFieldNumber = 9;
  inline const ::naothmessages::StepControlStatus& stepcontrolstatus() const;
  inline ::naothmessages::StepControlStatus* mutable_stepcontrolstatus();
  inline ::naothmessages::StepControlStatus* release_stepcontrolstatus();
  
  // @@protoc_insertion_point(class_scope:naothmessages.MotionStatus)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_lastmotion();
  inline void clear_has_lastmotion();
  inline void set_has_currentmotion();
  inline void clear_has_currentmotion();
  inline void set_has_headmotion();
  inline void clear_has_headmotion();
  inline void set_has_currentmotionstate();
  inline void clear_has_currentmotionstate();
  inline void set_has_plannedmotionleftfoot();
  inline void clear_has_plannedmotionleftfoot();
  inline void set_has_plannedmotionrightfoot();
  inline void clear_has_plannedmotionrightfoot();
  inline void set_has_plannedmotionhip();
  inline void clear_has_plannedmotionhip();
  inline void set_has_stepcontrolstatus();
  inline void clear_has_stepcontrolstatus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 lastmotion_;
  ::google::protobuf::uint32 currentmotion_;
  ::google::protobuf::uint32 headmotion_;
  ::naothmessages::Pose2D* plannedmotionleftfoot_;
  ::naothmessages::Pose2D* plannedmotionrightfoot_;
  ::naothmessages::Pose2D* plannedmotionhip_;
  ::naothmessages::StepControlStatus* stepcontrolstatus_;
  ::google::protobuf::uint32 currentmotionstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static MotionStatus* default_instance_;
};
// -------------------------------------------------------------------

class OdometryData : public ::google::protobuf::Message {
 public:
  OdometryData();
  virtual ~OdometryData();
  
  OdometryData(const OdometryData& from);
  
  inline OdometryData& operator=(const OdometryData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryData& default_instance();
  
  void Swap(OdometryData* other);
  
  // implements Message ----------------------------------------------
  
  OdometryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OdometryData& from);
  void MergeFrom(const OdometryData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .naothmessages.Pose2D pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::naothmessages::Pose2D& pose() const;
  inline ::naothmessages::Pose2D* mutable_pose();
  inline ::naothmessages::Pose2D* release_pose();
  
  // @@protoc_insertion_point(class_scope:naothmessages.OdometryData)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::Pose2D* pose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static OdometryData* default_instance_;
};
// -------------------------------------------------------------------

class CalibrationData : public ::google::protobuf::Message {
 public:
  CalibrationData();
  virtual ~CalibrationData();
  
  CalibrationData(const CalibrationData& from);
  
  inline CalibrationData& operator=(const CalibrationData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalibrationData& default_instance();
  
  void Swap(CalibrationData* other);
  
  // implements Message ----------------------------------------------
  
  CalibrationData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalibrationData& from);
  void MergeFrom(const CalibrationData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
  inline bool has_inertialsensoroffset() const;
  inline void clear_inertialsensoroffset();
  static const int kInertialSensorOffsetFieldNumber = 1;
  inline const ::naothmessages::DoubleVector2& inertialsensoroffset() const;
  inline ::naothmessages::DoubleVector2* mutable_inertialsensoroffset();
  inline ::naothmessages::DoubleVector2* release_inertialsensoroffset();
  
  // optional .naothmessages.DoubleVector2 gyroSensorOffset = 2;
  inline bool has_gyrosensoroffset() const;
  inline void clear_gyrosensoroffset();
  static const int kGyroSensorOffsetFieldNumber = 2;
  inline const ::naothmessages::DoubleVector2& gyrosensoroffset() const;
  inline ::naothmessages::DoubleVector2* mutable_gyrosensoroffset();
  inline ::naothmessages::DoubleVector2* release_gyrosensoroffset();
  
  // optional .naothmessages.DoubleVector3 accSensorOffset = 3;
  inline bool has_accsensoroffset() const;
  inline void clear_accsensoroffset();
  static const int kAccSensorOffsetFieldNumber = 3;
  inline const ::naothmessages::DoubleVector3& accsensoroffset() const;
  inline ::naothmessages::DoubleVector3* mutable_accsensoroffset();
  inline ::naothmessages::DoubleVector3* release_accsensoroffset();
  
  // @@protoc_insertion_point(class_scope:naothmessages.CalibrationData)
 private:
  inline void set_has_inertialsensoroffset();
  inline void clear_has_inertialsensoroffset();
  inline void set_has_gyrosensoroffset();
  inline void clear_has_gyrosensoroffset();
  inline void set_has_accsensoroffset();
  inline void clear_has_accsensoroffset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::DoubleVector2* inertialsensoroffset_;
  ::naothmessages::DoubleVector2* gyrosensoroffset_;
  ::naothmessages::DoubleVector3* accsensoroffset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static CalibrationData* default_instance_;
};
// -------------------------------------------------------------------

class InertialModel : public ::google::protobuf::Message {
 public:
  InertialModel();
  virtual ~InertialModel();
  
  InertialModel(const InertialModel& from);
  
  inline InertialModel& operator=(const InertialModel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InertialModel& default_instance();
  
  void Swap(InertialModel* other);
  
  // implements Message ----------------------------------------------
  
  InertialModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InertialModel& from);
  void MergeFrom(const InertialModel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .naothmessages.DoubleVector2 orientation = 1;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 1;
  inline const ::naothmessages::DoubleVector2& orientation() const;
  inline ::naothmessages::DoubleVector2* mutable_orientation();
  inline ::naothmessages::DoubleVector2* release_orientation();
  
  // @@protoc_insertion_point(class_scope:naothmessages.InertialModel)
 private:
  inline void set_has_orientation();
  inline void clear_has_orientation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::naothmessages::DoubleVector2* orientation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Representations_2eproto();
  friend void protobuf_AssignDesc_Representations_2eproto();
  friend void protobuf_ShutdownFile_Representations_2eproto();
  
  void InitAsDefaultInstance();
  static InertialModel* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraMatrix

// required .naothmessages.Pose3D pose = 1;
inline bool CameraMatrix::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraMatrix::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraMatrix::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraMatrix::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose3D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose3D& CameraMatrix::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::naothmessages::Pose3D* CameraMatrix::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::naothmessages::Pose3D;
  return pose_;
}
inline ::naothmessages::Pose3D* CameraMatrix::release_pose() {
  clear_has_pose();
  ::naothmessages::Pose3D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// optional .naothmessages.CameraID cameraID = 2 [default = bottom];
inline bool CameraMatrix::has_cameraid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraMatrix::set_has_cameraid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraMatrix::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraMatrix::clear_cameraid() {
  cameraid_ = 1;
  clear_has_cameraid();
}
inline naothmessages::CameraID CameraMatrix::cameraid() const {
  return static_cast< naothmessages::CameraID >(cameraid_);
}
inline void CameraMatrix::set_cameraid(naothmessages::CameraID value) {
  GOOGLE_DCHECK(naothmessages::CameraID_IsValid(value));
  set_has_cameraid();
  cameraid_ = value;
}

// optional bool valid = 3;
inline bool CameraMatrix::has_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraMatrix::set_has_valid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraMatrix::clear_has_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraMatrix::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool CameraMatrix::valid() const {
  return valid_;
}
inline void CameraMatrix::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
}

// -------------------------------------------------------------------

// BallPercept

// optional bool ballWasSeen = 1;
inline bool BallPercept::has_ballwasseen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BallPercept::set_has_ballwasseen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BallPercept::clear_has_ballwasseen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BallPercept::clear_ballwasseen() {
  ballwasseen_ = false;
  clear_has_ballwasseen();
}
inline bool BallPercept::ballwasseen() const {
  return ballwasseen_;
}
inline void BallPercept::set_ballwasseen(bool value) {
  set_has_ballwasseen();
  ballwasseen_ = value;
}

// optional .naothmessages.DoubleVector2 centerInImage = 2;
inline bool BallPercept::has_centerinimage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BallPercept::set_has_centerinimage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BallPercept::clear_has_centerinimage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BallPercept::clear_centerinimage() {
  if (centerinimage_ != NULL) centerinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_centerinimage();
}
inline const ::naothmessages::DoubleVector2& BallPercept::centerinimage() const {
  return centerinimage_ != NULL ? *centerinimage_ : *default_instance_->centerinimage_;
}
inline ::naothmessages::DoubleVector2* BallPercept::mutable_centerinimage() {
  set_has_centerinimage();
  if (centerinimage_ == NULL) centerinimage_ = new ::naothmessages::DoubleVector2;
  return centerinimage_;
}
inline ::naothmessages::DoubleVector2* BallPercept::release_centerinimage() {
  clear_has_centerinimage();
  ::naothmessages::DoubleVector2* temp = centerinimage_;
  centerinimage_ = NULL;
  return temp;
}

// optional double radiusInImage = 3;
inline bool BallPercept::has_radiusinimage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BallPercept::set_has_radiusinimage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BallPercept::clear_has_radiusinimage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BallPercept::clear_radiusinimage() {
  radiusinimage_ = 0;
  clear_has_radiusinimage();
}
inline double BallPercept::radiusinimage() const {
  return radiusinimage_;
}
inline void BallPercept::set_radiusinimage(double value) {
  set_has_radiusinimage();
  radiusinimage_ = value;
}

// optional .naothmessages.Color ballColor = 4;
inline bool BallPercept::has_ballcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BallPercept::set_has_ballcolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BallPercept::clear_has_ballcolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BallPercept::clear_ballcolor() {
  ballcolor_ = 0;
  clear_has_ballcolor();
}
inline naothmessages::Color BallPercept::ballcolor() const {
  return static_cast< naothmessages::Color >(ballcolor_);
}
inline void BallPercept::set_ballcolor(naothmessages::Color value) {
  GOOGLE_DCHECK(naothmessages::Color_IsValid(value));
  set_has_ballcolor();
  ballcolor_ = value;
}

// optional .naothmessages.DoubleVector2 bearingBasedOffsetOnField = 5;
inline bool BallPercept::has_bearingbasedoffsetonfield() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BallPercept::set_has_bearingbasedoffsetonfield() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BallPercept::clear_has_bearingbasedoffsetonfield() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BallPercept::clear_bearingbasedoffsetonfield() {
  if (bearingbasedoffsetonfield_ != NULL) bearingbasedoffsetonfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_bearingbasedoffsetonfield();
}
inline const ::naothmessages::DoubleVector2& BallPercept::bearingbasedoffsetonfield() const {
  return bearingbasedoffsetonfield_ != NULL ? *bearingbasedoffsetonfield_ : *default_instance_->bearingbasedoffsetonfield_;
}
inline ::naothmessages::DoubleVector2* BallPercept::mutable_bearingbasedoffsetonfield() {
  set_has_bearingbasedoffsetonfield();
  if (bearingbasedoffsetonfield_ == NULL) bearingbasedoffsetonfield_ = new ::naothmessages::DoubleVector2;
  return bearingbasedoffsetonfield_;
}
inline ::naothmessages::DoubleVector2* BallPercept::release_bearingbasedoffsetonfield() {
  clear_has_bearingbasedoffsetonfield();
  ::naothmessages::DoubleVector2* temp = bearingbasedoffsetonfield_;
  bearingbasedoffsetonfield_ = NULL;
  return temp;
}

// optional .naothmessages.FrameInfo frameInfoWhenBallWasSeen = 6;
inline bool BallPercept::has_frameinfowhenballwasseen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BallPercept::set_has_frameinfowhenballwasseen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BallPercept::clear_has_frameinfowhenballwasseen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BallPercept::clear_frameinfowhenballwasseen() {
  if (frameinfowhenballwasseen_ != NULL) frameinfowhenballwasseen_->::naothmessages::FrameInfo::Clear();
  clear_has_frameinfowhenballwasseen();
}
inline const ::naothmessages::FrameInfo& BallPercept::frameinfowhenballwasseen() const {
  return frameinfowhenballwasseen_ != NULL ? *frameinfowhenballwasseen_ : *default_instance_->frameinfowhenballwasseen_;
}
inline ::naothmessages::FrameInfo* BallPercept::mutable_frameinfowhenballwasseen() {
  set_has_frameinfowhenballwasseen();
  if (frameinfowhenballwasseen_ == NULL) frameinfowhenballwasseen_ = new ::naothmessages::FrameInfo;
  return frameinfowhenballwasseen_;
}
inline ::naothmessages::FrameInfo* BallPercept::release_frameinfowhenballwasseen() {
  clear_has_frameinfowhenballwasseen();
  ::naothmessages::FrameInfo* temp = frameinfowhenballwasseen_;
  frameinfowhenballwasseen_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GoalPercept

// optional double angleToSeenGoal = 1;
inline bool GoalPercept::has_angletoseengoal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoalPercept::set_has_angletoseengoal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoalPercept::clear_has_angletoseengoal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoalPercept::clear_angletoseengoal() {
  angletoseengoal_ = 0;
  clear_has_angletoseengoal();
}
inline double GoalPercept::angletoseengoal() const {
  return angletoseengoal_;
}
inline void GoalPercept::set_angletoseengoal(double value) {
  set_has_angletoseengoal();
  angletoseengoal_ = value;
}

// optional .naothmessages.DoubleVector3 goalCentroid = 2;
inline bool GoalPercept::has_goalcentroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoalPercept::set_has_goalcentroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoalPercept::clear_has_goalcentroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoalPercept::clear_goalcentroid() {
  if (goalcentroid_ != NULL) goalcentroid_->::naothmessages::DoubleVector3::Clear();
  clear_has_goalcentroid();
}
inline const ::naothmessages::DoubleVector3& GoalPercept::goalcentroid() const {
  return goalcentroid_ != NULL ? *goalcentroid_ : *default_instance_->goalcentroid_;
}
inline ::naothmessages::DoubleVector3* GoalPercept::mutable_goalcentroid() {
  set_has_goalcentroid();
  if (goalcentroid_ == NULL) goalcentroid_ = new ::naothmessages::DoubleVector3;
  return goalcentroid_;
}
inline ::naothmessages::DoubleVector3* GoalPercept::release_goalcentroid() {
  clear_has_goalcentroid();
  ::naothmessages::DoubleVector3* temp = goalcentroid_;
  goalcentroid_ = NULL;
  return temp;
}

// optional int32 numberOfSeenPosts = 3;
inline bool GoalPercept::has_numberofseenposts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoalPercept::set_has_numberofseenposts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoalPercept::clear_has_numberofseenposts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoalPercept::clear_numberofseenposts() {
  numberofseenposts_ = 0;
  clear_has_numberofseenposts();
}
inline ::google::protobuf::int32 GoalPercept::numberofseenposts() const {
  return numberofseenposts_;
}
inline void GoalPercept::set_numberofseenposts(::google::protobuf::int32 value) {
  set_has_numberofseenposts();
  numberofseenposts_ = value;
}

// repeated .naothmessages.GoalPost post = 4;
inline int GoalPercept::post_size() const {
  return post_.size();
}
inline void GoalPercept::clear_post() {
  post_.Clear();
}
inline const ::naothmessages::GoalPost& GoalPercept::post(int index) const {
  return post_.Get(index);
}
inline ::naothmessages::GoalPost* GoalPercept::mutable_post(int index) {
  return post_.Mutable(index);
}
inline ::naothmessages::GoalPost* GoalPercept::add_post() {
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >&
GoalPercept::post() const {
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::GoalPost >*
GoalPercept::mutable_post() {
  return &post_;
}

// -------------------------------------------------------------------

// HeadMotionRequest

// required uint32 id = 1;
inline bool HeadMotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeadMotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeadMotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeadMotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HeadMotionRequest::id() const {
  return id_;
}
inline void HeadMotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 cameraID = 2;
inline bool HeadMotionRequest::has_cameraid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeadMotionRequest::set_has_cameraid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeadMotionRequest::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeadMotionRequest::clear_cameraid() {
  cameraid_ = 0u;
  clear_has_cameraid();
}
inline ::google::protobuf::uint32 HeadMotionRequest::cameraid() const {
  return cameraid_;
}
inline void HeadMotionRequest::set_cameraid(::google::protobuf::uint32 value) {
  set_has_cameraid();
  cameraid_ = value;
}

// optional .naothmessages.DoubleVector2 targetJointPosition = 3;
inline bool HeadMotionRequest::has_targetjointposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeadMotionRequest::set_has_targetjointposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeadMotionRequest::clear_has_targetjointposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeadMotionRequest::clear_targetjointposition() {
  if (targetjointposition_ != NULL) targetjointposition_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetjointposition();
}
inline const ::naothmessages::DoubleVector2& HeadMotionRequest::targetjointposition() const {
  return targetjointposition_ != NULL ? *targetjointposition_ : *default_instance_->targetjointposition_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetjointposition() {
  set_has_targetjointposition();
  if (targetjointposition_ == NULL) targetjointposition_ = new ::naothmessages::DoubleVector2;
  return targetjointposition_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::release_targetjointposition() {
  clear_has_targetjointposition();
  ::naothmessages::DoubleVector2* temp = targetjointposition_;
  targetjointposition_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector2 targetPointInImage = 4;
inline bool HeadMotionRequest::has_targetpointinimage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeadMotionRequest::set_has_targetpointinimage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeadMotionRequest::clear_has_targetpointinimage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeadMotionRequest::clear_targetpointinimage() {
  if (targetpointinimage_ != NULL) targetpointinimage_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetpointinimage();
}
inline const ::naothmessages::DoubleVector2& HeadMotionRequest::targetpointinimage() const {
  return targetpointinimage_ != NULL ? *targetpointinimage_ : *default_instance_->targetpointinimage_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetpointinimage() {
  set_has_targetpointinimage();
  if (targetpointinimage_ == NULL) targetpointinimage_ = new ::naothmessages::DoubleVector2;
  return targetpointinimage_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::release_targetpointinimage() {
  clear_has_targetpointinimage();
  ::naothmessages::DoubleVector2* temp = targetpointinimage_;
  targetpointinimage_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 targetPointInTheWorld = 5;
inline bool HeadMotionRequest::has_targetpointintheworld() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeadMotionRequest::set_has_targetpointintheworld() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeadMotionRequest::clear_has_targetpointintheworld() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeadMotionRequest::clear_targetpointintheworld() {
  if (targetpointintheworld_ != NULL) targetpointintheworld_->::naothmessages::DoubleVector3::Clear();
  clear_has_targetpointintheworld();
}
inline const ::naothmessages::DoubleVector3& HeadMotionRequest::targetpointintheworld() const {
  return targetpointintheworld_ != NULL ? *targetpointintheworld_ : *default_instance_->targetpointintheworld_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::mutable_targetpointintheworld() {
  set_has_targetpointintheworld();
  if (targetpointintheworld_ == NULL) targetpointintheworld_ = new ::naothmessages::DoubleVector3;
  return targetpointintheworld_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::release_targetpointintheworld() {
  clear_has_targetpointintheworld();
  ::naothmessages::DoubleVector3* temp = targetpointintheworld_;
  targetpointintheworld_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 searchCenter = 6;
inline bool HeadMotionRequest::has_searchcenter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeadMotionRequest::set_has_searchcenter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeadMotionRequest::clear_has_searchcenter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeadMotionRequest::clear_searchcenter() {
  if (searchcenter_ != NULL) searchcenter_->::naothmessages::DoubleVector3::Clear();
  clear_has_searchcenter();
}
inline const ::naothmessages::DoubleVector3& HeadMotionRequest::searchcenter() const {
  return searchcenter_ != NULL ? *searchcenter_ : *default_instance_->searchcenter_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::mutable_searchcenter() {
  set_has_searchcenter();
  if (searchcenter_ == NULL) searchcenter_ = new ::naothmessages::DoubleVector3;
  return searchcenter_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::release_searchcenter() {
  clear_has_searchcenter();
  ::naothmessages::DoubleVector3* temp = searchcenter_;
  searchcenter_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 searchSize = 7;
inline bool HeadMotionRequest::has_searchsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeadMotionRequest::set_has_searchsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeadMotionRequest::clear_has_searchsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeadMotionRequest::clear_searchsize() {
  if (searchsize_ != NULL) searchsize_->::naothmessages::DoubleVector3::Clear();
  clear_has_searchsize();
}
inline const ::naothmessages::DoubleVector3& HeadMotionRequest::searchsize() const {
  return searchsize_ != NULL ? *searchsize_ : *default_instance_->searchsize_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::mutable_searchsize() {
  set_has_searchsize();
  if (searchsize_ == NULL) searchsize_ = new ::naothmessages::DoubleVector3;
  return searchsize_;
}
inline ::naothmessages::DoubleVector3* HeadMotionRequest::release_searchsize() {
  clear_has_searchsize();
  ::naothmessages::DoubleVector3* temp = searchsize_;
  searchsize_ = NULL;
  return temp;
}

// optional bool searchDirection = 8;
inline bool HeadMotionRequest::has_searchdirection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeadMotionRequest::set_has_searchdirection() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeadMotionRequest::clear_has_searchdirection() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeadMotionRequest::clear_searchdirection() {
  searchdirection_ = false;
  clear_has_searchdirection();
}
inline bool HeadMotionRequest::searchdirection() const {
  return searchdirection_;
}
inline void HeadMotionRequest::set_searchdirection(bool value) {
  set_has_searchdirection();
  searchdirection_ = value;
}

// optional .naothmessages.DoubleVector2 targetPointOnTheGround = 9;
inline bool HeadMotionRequest::has_targetpointontheground() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeadMotionRequest::set_has_targetpointontheground() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeadMotionRequest::clear_has_targetpointontheground() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeadMotionRequest::clear_targetpointontheground() {
  if (targetpointontheground_ != NULL) targetpointontheground_->::naothmessages::DoubleVector2::Clear();
  clear_has_targetpointontheground();
}
inline const ::naothmessages::DoubleVector2& HeadMotionRequest::targetpointontheground() const {
  return targetpointontheground_ != NULL ? *targetpointontheground_ : *default_instance_->targetpointontheground_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::mutable_targetpointontheground() {
  set_has_targetpointontheground();
  if (targetpointontheground_ == NULL) targetpointontheground_ = new ::naothmessages::DoubleVector2;
  return targetpointontheground_;
}
inline ::naothmessages::DoubleVector2* HeadMotionRequest::release_targetpointontheground() {
  clear_has_targetpointontheground();
  ::naothmessages::DoubleVector2* temp = targetpointontheground_;
  targetpointontheground_ = NULL;
  return temp;
}

// optional uint32 coordinate = 10;
inline bool HeadMotionRequest::has_coordinate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeadMotionRequest::set_has_coordinate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeadMotionRequest::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeadMotionRequest::clear_coordinate() {
  coordinate_ = 0u;
  clear_has_coordinate();
}
inline ::google::protobuf::uint32 HeadMotionRequest::coordinate() const {
  return coordinate_;
}
inline void HeadMotionRequest::set_coordinate(::google::protobuf::uint32 value) {
  set_has_coordinate();
  coordinate_ = value;
}

// -------------------------------------------------------------------

// StepControlRequest

// required uint32 stepID = 1;
inline bool StepControlRequest::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepControlRequest::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StepControlRequest::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StepControlRequest::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 StepControlRequest::stepid() const {
  return stepid_;
}
inline void StepControlRequest::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// required bool moveLeftFoot = 2;
inline bool StepControlRequest::has_moveleftfoot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepControlRequest::set_has_moveleftfoot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StepControlRequest::clear_has_moveleftfoot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StepControlRequest::clear_moveleftfoot() {
  moveleftfoot_ = false;
  clear_has_moveleftfoot();
}
inline bool StepControlRequest::moveleftfoot() const {
  return moveleftfoot_;
}
inline void StepControlRequest::set_moveleftfoot(bool value) {
  set_has_moveleftfoot();
  moveleftfoot_ = value;
}

// required .naothmessages.Pose2D target = 3;
inline bool StepControlRequest::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StepControlRequest::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StepControlRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StepControlRequest::clear_target() {
  if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
  clear_has_target();
}
inline const ::naothmessages::Pose2D& StepControlRequest::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::naothmessages::Pose2D* StepControlRequest::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::naothmessages::Pose2D;
  return target_;
}
inline ::naothmessages::Pose2D* StepControlRequest::release_target() {
  clear_has_target();
  ::naothmessages::Pose2D* temp = target_;
  target_ = NULL;
  return temp;
}

// required uint32 time = 4;
inline bool StepControlRequest::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StepControlRequest::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StepControlRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StepControlRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 StepControlRequest::time() const {
  return time_;
}
inline void StepControlRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required double speedDirection = 5;
inline bool StepControlRequest::has_speeddirection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StepControlRequest::set_has_speeddirection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StepControlRequest::clear_has_speeddirection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StepControlRequest::clear_speeddirection() {
  speeddirection_ = 0;
  clear_has_speeddirection();
}
inline double StepControlRequest::speeddirection() const {
  return speeddirection_;
}
inline void StepControlRequest::set_speeddirection(double value) {
  set_has_speeddirection();
  speeddirection_ = value;
}

// -------------------------------------------------------------------

// WalkRequest

// required uint32 coordinate = 1;
inline bool WalkRequest::has_coordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalkRequest::set_has_coordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WalkRequest::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WalkRequest::clear_coordinate() {
  coordinate_ = 0u;
  clear_has_coordinate();
}
inline ::google::protobuf::uint32 WalkRequest::coordinate() const {
  return coordinate_;
}
inline void WalkRequest::set_coordinate(::google::protobuf::uint32 value) {
  set_has_coordinate();
  coordinate_ = value;
}

// required double character = 2;
inline bool WalkRequest::has_character() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalkRequest::set_has_character() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WalkRequest::clear_has_character() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WalkRequest::clear_character() {
  character_ = 0;
  clear_has_character();
}
inline double WalkRequest::character() const {
  return character_;
}
inline void WalkRequest::set_character(double value) {
  set_has_character();
  character_ = value;
}

// required .naothmessages.Pose2D target = 3;
inline bool WalkRequest::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalkRequest::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WalkRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WalkRequest::clear_target() {
  if (target_ != NULL) target_->::naothmessages::Pose2D::Clear();
  clear_has_target();
}
inline const ::naothmessages::Pose2D& WalkRequest::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::naothmessages::Pose2D* WalkRequest::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::naothmessages::Pose2D;
  return target_;
}
inline ::naothmessages::Pose2D* WalkRequest::release_target() {
  clear_has_target();
  ::naothmessages::Pose2D* temp = target_;
  target_ = NULL;
  return temp;
}

// optional .naothmessages.StepControlRequest stepControl = 4;
inline bool WalkRequest::has_stepcontrol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalkRequest::set_has_stepcontrol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WalkRequest::clear_has_stepcontrol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WalkRequest::clear_stepcontrol() {
  if (stepcontrol_ != NULL) stepcontrol_->::naothmessages::StepControlRequest::Clear();
  clear_has_stepcontrol();
}
inline const ::naothmessages::StepControlRequest& WalkRequest::stepcontrol() const {
  return stepcontrol_ != NULL ? *stepcontrol_ : *default_instance_->stepcontrol_;
}
inline ::naothmessages::StepControlRequest* WalkRequest::mutable_stepcontrol() {
  set_has_stepcontrol();
  if (stepcontrol_ == NULL) stepcontrol_ = new ::naothmessages::StepControlRequest;
  return stepcontrol_;
}
inline ::naothmessages::StepControlRequest* WalkRequest::release_stepcontrol() {
  clear_has_stepcontrol();
  ::naothmessages::StepControlRequest* temp = stepcontrol_;
  stepcontrol_ = NULL;
  return temp;
}

// required .naothmessages.Pose2D offset = 5;
inline bool WalkRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalkRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WalkRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WalkRequest::clear_offset() {
  if (offset_ != NULL) offset_->::naothmessages::Pose2D::Clear();
  clear_has_offset();
}
inline const ::naothmessages::Pose2D& WalkRequest::offset() const {
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
inline ::naothmessages::Pose2D* WalkRequest::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) offset_ = new ::naothmessages::Pose2D;
  return offset_;
}
inline ::naothmessages::Pose2D* WalkRequest::release_offset() {
  clear_has_offset();
  ::naothmessages::Pose2D* temp = offset_;
  offset_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// KickRequest

// required .naothmessages.DoubleVector3 kickPoint = 1;
inline bool KickRequest::has_kickpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickRequest::set_has_kickpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickRequest::clear_has_kickpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickRequest::clear_kickpoint() {
  if (kickpoint_ != NULL) kickpoint_->::naothmessages::DoubleVector3::Clear();
  clear_has_kickpoint();
}
inline const ::naothmessages::DoubleVector3& KickRequest::kickpoint() const {
  return kickpoint_ != NULL ? *kickpoint_ : *default_instance_->kickpoint_;
}
inline ::naothmessages::DoubleVector3* KickRequest::mutable_kickpoint() {
  set_has_kickpoint();
  if (kickpoint_ == NULL) kickpoint_ = new ::naothmessages::DoubleVector3;
  return kickpoint_;
}
inline ::naothmessages::DoubleVector3* KickRequest::release_kickpoint() {
  clear_has_kickpoint();
  ::naothmessages::DoubleVector3* temp = kickpoint_;
  kickpoint_ = NULL;
  return temp;
}

// required double kickDirection = 2;
inline bool KickRequest::has_kickdirection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickRequest::set_has_kickdirection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickRequest::clear_has_kickdirection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickRequest::clear_kickdirection() {
  kickdirection_ = 0;
  clear_has_kickdirection();
}
inline double KickRequest::kickdirection() const {
  return kickdirection_;
}
inline void KickRequest::set_kickdirection(double value) {
  set_has_kickdirection();
  kickdirection_ = value;
}

// required int32 kickFoot = 3;
inline bool KickRequest::has_kickfoot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickRequest::set_has_kickfoot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickRequest::clear_has_kickfoot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickRequest::clear_kickfoot() {
  kickfoot_ = 0;
  clear_has_kickfoot();
}
inline ::google::protobuf::int32 KickRequest::kickfoot() const {
  return kickfoot_;
}
inline void KickRequest::set_kickfoot(::google::protobuf::int32 value) {
  set_has_kickfoot();
  kickfoot_ = value;
}

// required bool finishKick = 4;
inline bool KickRequest::has_finishkick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickRequest::set_has_finishkick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickRequest::clear_has_finishkick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickRequest::clear_finishkick() {
  finishkick_ = false;
  clear_has_finishkick();
}
inline bool KickRequest::finishkick() const {
  return finishkick_;
}
inline void KickRequest::set_finishkick(bool value) {
  set_has_finishkick();
  finishkick_ = value;
}

// -------------------------------------------------------------------

// MotionRequest

// required uint32 id = 1;
inline bool MotionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MotionRequest::id() const {
  return id_;
}
inline void MotionRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 time = 2;
inline bool MotionRequest::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionRequest::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MotionRequest::time() const {
  return time_;
}
inline void MotionRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required bool forced = 3;
inline bool MotionRequest::has_forced() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionRequest::set_has_forced() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionRequest::clear_has_forced() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionRequest::clear_forced() {
  forced_ = false;
  clear_has_forced();
}
inline bool MotionRequest::forced() const {
  return forced_;
}
inline void MotionRequest::set_forced(bool value) {
  set_has_forced();
  forced_ = value;
}

// optional .naothmessages.WalkRequest walkRequest = 4;
inline bool MotionRequest::has_walkrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionRequest::set_has_walkrequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionRequest::clear_has_walkrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionRequest::clear_walkrequest() {
  if (walkrequest_ != NULL) walkrequest_->::naothmessages::WalkRequest::Clear();
  clear_has_walkrequest();
}
inline const ::naothmessages::WalkRequest& MotionRequest::walkrequest() const {
  return walkrequest_ != NULL ? *walkrequest_ : *default_instance_->walkrequest_;
}
inline ::naothmessages::WalkRequest* MotionRequest::mutable_walkrequest() {
  set_has_walkrequest();
  if (walkrequest_ == NULL) walkrequest_ = new ::naothmessages::WalkRequest;
  return walkrequest_;
}
inline ::naothmessages::WalkRequest* MotionRequest::release_walkrequest() {
  clear_has_walkrequest();
  ::naothmessages::WalkRequest* temp = walkrequest_;
  walkrequest_ = NULL;
  return temp;
}

// optional bool starndardStand = 5;
inline bool MotionRequest::has_starndardstand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionRequest::set_has_starndardstand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotionRequest::clear_has_starndardstand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotionRequest::clear_starndardstand() {
  starndardstand_ = false;
  clear_has_starndardstand();
}
inline bool MotionRequest::starndardstand() const {
  return starndardstand_;
}
inline void MotionRequest::set_starndardstand(bool value) {
  set_has_starndardstand();
  starndardstand_ = value;
}

// optional .naothmessages.KickRequest kickRequest = 6;
inline bool MotionRequest::has_kickrequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionRequest::set_has_kickrequest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MotionRequest::clear_has_kickrequest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MotionRequest::clear_kickrequest() {
  if (kickrequest_ != NULL) kickrequest_->::naothmessages::KickRequest::Clear();
  clear_has_kickrequest();
}
inline const ::naothmessages::KickRequest& MotionRequest::kickrequest() const {
  return kickrequest_ != NULL ? *kickrequest_ : *default_instance_->kickrequest_;
}
inline ::naothmessages::KickRequest* MotionRequest::mutable_kickrequest() {
  set_has_kickrequest();
  if (kickrequest_ == NULL) kickrequest_ = new ::naothmessages::KickRequest;
  return kickrequest_;
}
inline ::naothmessages::KickRequest* MotionRequest::release_kickrequest() {
  clear_has_kickrequest();
  ::naothmessages::KickRequest* temp = kickrequest_;
  kickrequest_ = NULL;
  return temp;
}

// optional double standHeight = 7;
inline bool MotionRequest::has_standheight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MotionRequest::set_has_standheight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MotionRequest::clear_has_standheight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MotionRequest::clear_standheight() {
  standheight_ = 0;
  clear_has_standheight();
}
inline double MotionRequest::standheight() const {
  return standheight_;
}
inline void MotionRequest::set_standheight(double value) {
  set_has_standheight();
  standheight_ = value;
}

// optional bool calibrateFootTouchDetector = 8;
inline bool MotionRequest::has_calibratefoottouchdetector() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MotionRequest::set_has_calibratefoottouchdetector() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MotionRequest::clear_has_calibratefoottouchdetector() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MotionRequest::clear_calibratefoottouchdetector() {
  calibratefoottouchdetector_ = false;
  clear_has_calibratefoottouchdetector();
}
inline bool MotionRequest::calibratefoottouchdetector() const {
  return calibratefoottouchdetector_;
}
inline void MotionRequest::set_calibratefoottouchdetector(bool value) {
  set_has_calibratefoottouchdetector();
  calibratefoottouchdetector_ = value;
}

// optional uint32 cognitionFrameNumber = 9;
inline bool MotionRequest::has_cognitionframenumber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MotionRequest::set_has_cognitionframenumber() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MotionRequest::clear_has_cognitionframenumber() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MotionRequest::clear_cognitionframenumber() {
  cognitionframenumber_ = 0u;
  clear_has_cognitionframenumber();
}
inline ::google::protobuf::uint32 MotionRequest::cognitionframenumber() const {
  return cognitionframenumber_;
}
inline void MotionRequest::set_cognitionframenumber(::google::protobuf::uint32 value) {
  set_has_cognitionframenumber();
  cognitionframenumber_ = value;
}

// -------------------------------------------------------------------

// LinePercept

// repeated .naothmessages.FieldLineSegment lines = 1;
inline int LinePercept::lines_size() const {
  return lines_.size();
}
inline void LinePercept::clear_lines() {
  lines_.Clear();
}
inline const ::naothmessages::FieldLineSegment& LinePercept::lines(int index) const {
  return lines_.Get(index);
}
inline ::naothmessages::FieldLineSegment* LinePercept::mutable_lines(int index) {
  return lines_.Mutable(index);
}
inline ::naothmessages::FieldLineSegment* LinePercept::add_lines() {
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >&
LinePercept::lines() const {
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::FieldLineSegment >*
LinePercept::mutable_lines() {
  return &lines_;
}

// repeated .naothmessages.Intersection intersections = 2;
inline int LinePercept::intersections_size() const {
  return intersections_.size();
}
inline void LinePercept::clear_intersections() {
  intersections_.Clear();
}
inline const ::naothmessages::Intersection& LinePercept::intersections(int index) const {
  return intersections_.Get(index);
}
inline ::naothmessages::Intersection* LinePercept::mutable_intersections(int index) {
  return intersections_.Mutable(index);
}
inline ::naothmessages::Intersection* LinePercept::add_intersections() {
  return intersections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >&
LinePercept::intersections() const {
  return intersections_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::Intersection >*
LinePercept::mutable_intersections() {
  return &intersections_;
}

// optional .naothmessages.DoubleVector2 middleCircleCenter = 3;
inline bool LinePercept::has_middlecirclecenter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinePercept::set_has_middlecirclecenter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinePercept::clear_has_middlecirclecenter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinePercept::clear_middlecirclecenter() {
  if (middlecirclecenter_ != NULL) middlecirclecenter_->::naothmessages::DoubleVector2::Clear();
  clear_has_middlecirclecenter();
}
inline const ::naothmessages::DoubleVector2& LinePercept::middlecirclecenter() const {
  return middlecirclecenter_ != NULL ? *middlecirclecenter_ : *default_instance_->middlecirclecenter_;
}
inline ::naothmessages::DoubleVector2* LinePercept::mutable_middlecirclecenter() {
  set_has_middlecirclecenter();
  if (middlecirclecenter_ == NULL) middlecirclecenter_ = new ::naothmessages::DoubleVector2;
  return middlecirclecenter_;
}
inline ::naothmessages::DoubleVector2* LinePercept::release_middlecirclecenter() {
  clear_has_middlecirclecenter();
  ::naothmessages::DoubleVector2* temp = middlecirclecenter_;
  middlecirclecenter_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ScanLineEndPoint

// required .naothmessages.IntVector2 posInImage = 1;
inline bool ScanLineEndPoint::has_posinimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanLineEndPoint::set_has_posinimage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanLineEndPoint::clear_has_posinimage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanLineEndPoint::clear_posinimage() {
  if (posinimage_ != NULL) posinimage_->::naothmessages::IntVector2::Clear();
  clear_has_posinimage();
}
inline const ::naothmessages::IntVector2& ScanLineEndPoint::posinimage() const {
  return posinimage_ != NULL ? *posinimage_ : *default_instance_->posinimage_;
}
inline ::naothmessages::IntVector2* ScanLineEndPoint::mutable_posinimage() {
  set_has_posinimage();
  if (posinimage_ == NULL) posinimage_ = new ::naothmessages::IntVector2;
  return posinimage_;
}
inline ::naothmessages::IntVector2* ScanLineEndPoint::release_posinimage() {
  clear_has_posinimage();
  ::naothmessages::IntVector2* temp = posinimage_;
  posinimage_ = NULL;
  return temp;
}

// required .naothmessages.DoubleVector2 posOnField = 2;
inline bool ScanLineEndPoint::has_posonfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanLineEndPoint::set_has_posonfield() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanLineEndPoint::clear_has_posonfield() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanLineEndPoint::clear_posonfield() {
  if (posonfield_ != NULL) posonfield_->::naothmessages::DoubleVector2::Clear();
  clear_has_posonfield();
}
inline const ::naothmessages::DoubleVector2& ScanLineEndPoint::posonfield() const {
  return posonfield_ != NULL ? *posonfield_ : *default_instance_->posonfield_;
}
inline ::naothmessages::DoubleVector2* ScanLineEndPoint::mutable_posonfield() {
  set_has_posonfield();
  if (posonfield_ == NULL) posonfield_ = new ::naothmessages::DoubleVector2;
  return posonfield_;
}
inline ::naothmessages::DoubleVector2* ScanLineEndPoint::release_posonfield() {
  clear_has_posonfield();
  ::naothmessages::DoubleVector2* temp = posonfield_;
  posonfield_ = NULL;
  return temp;
}

// required .naothmessages.Color color = 3;
inline bool ScanLineEndPoint::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanLineEndPoint::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanLineEndPoint::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanLineEndPoint::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline naothmessages::Color ScanLineEndPoint::color() const {
  return static_cast< naothmessages::Color >(color_);
}
inline void ScanLineEndPoint::set_color(naothmessages::Color value) {
  GOOGLE_DCHECK(naothmessages::Color_IsValid(value));
  set_has_color();
  color_ = value;
}

// required uint32 ScanLineID = 4;
inline bool ScanLineEndPoint::has_scanlineid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScanLineEndPoint::set_has_scanlineid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScanLineEndPoint::clear_has_scanlineid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScanLineEndPoint::clear_scanlineid() {
  scanlineid_ = 0u;
  clear_has_scanlineid();
}
inline ::google::protobuf::uint32 ScanLineEndPoint::scanlineid() const {
  return scanlineid_;
}
inline void ScanLineEndPoint::set_scanlineid(::google::protobuf::uint32 value) {
  set_has_scanlineid();
  scanlineid_ = value;
}

// -------------------------------------------------------------------

// ScanLineEdgelPercept

// repeated .naothmessages.ScanLineEndPoint endPoints = 2;
inline int ScanLineEdgelPercept::endpoints_size() const {
  return endpoints_.size();
}
inline void ScanLineEdgelPercept::clear_endpoints() {
  endpoints_.Clear();
}
inline const ::naothmessages::ScanLineEndPoint& ScanLineEdgelPercept::endpoints(int index) const {
  return endpoints_.Get(index);
}
inline ::naothmessages::ScanLineEndPoint* ScanLineEdgelPercept::mutable_endpoints(int index) {
  return endpoints_.Mutable(index);
}
inline ::naothmessages::ScanLineEndPoint* ScanLineEdgelPercept::add_endpoints() {
  return endpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint >&
ScanLineEdgelPercept::endpoints() const {
  return endpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::naothmessages::ScanLineEndPoint >*
ScanLineEdgelPercept::mutable_endpoints() {
  return &endpoints_;
}

// -------------------------------------------------------------------

// StepControlStatus

// required uint32 stepID = 1;
inline bool StepControlStatus::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepControlStatus::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StepControlStatus::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StepControlStatus::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 StepControlStatus::stepid() const {
  return stepid_;
}
inline void StepControlStatus::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// required uint32 moveableFoot = 2;
inline bool StepControlStatus::has_moveablefoot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepControlStatus::set_has_moveablefoot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StepControlStatus::clear_has_moveablefoot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StepControlStatus::clear_moveablefoot() {
  moveablefoot_ = 0u;
  clear_has_moveablefoot();
}
inline ::google::protobuf::uint32 StepControlStatus::moveablefoot() const {
  return moveablefoot_;
}
inline void StepControlStatus::set_moveablefoot(::google::protobuf::uint32 value) {
  set_has_moveablefoot();
  moveablefoot_ = value;
}

// -------------------------------------------------------------------

// MotionStatus

// required uint32 time = 1;
inline bool MotionStatus::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionStatus::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionStatus::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionStatus::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MotionStatus::time() const {
  return time_;
}
inline void MotionStatus::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 lastMotion = 2;
inline bool MotionStatus::has_lastmotion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionStatus::set_has_lastmotion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionStatus::clear_has_lastmotion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionStatus::clear_lastmotion() {
  lastmotion_ = 0u;
  clear_has_lastmotion();
}
inline ::google::protobuf::uint32 MotionStatus::lastmotion() const {
  return lastmotion_;
}
inline void MotionStatus::set_lastmotion(::google::protobuf::uint32 value) {
  set_has_lastmotion();
  lastmotion_ = value;
}

// required uint32 currentMotion = 3;
inline bool MotionStatus::has_currentmotion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionStatus::set_has_currentmotion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionStatus::clear_has_currentmotion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionStatus::clear_currentmotion() {
  currentmotion_ = 0u;
  clear_has_currentmotion();
}
inline ::google::protobuf::uint32 MotionStatus::currentmotion() const {
  return currentmotion_;
}
inline void MotionStatus::set_currentmotion(::google::protobuf::uint32 value) {
  set_has_currentmotion();
  currentmotion_ = value;
}

// required uint32 headMotion = 4;
inline bool MotionStatus::has_headmotion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionStatus::set_has_headmotion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionStatus::clear_has_headmotion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionStatus::clear_headmotion() {
  headmotion_ = 0u;
  clear_has_headmotion();
}
inline ::google::protobuf::uint32 MotionStatus::headmotion() const {
  return headmotion_;
}
inline void MotionStatus::set_headmotion(::google::protobuf::uint32 value) {
  set_has_headmotion();
  headmotion_ = value;
}

// required uint32 currentMotionState = 5;
inline bool MotionStatus::has_currentmotionstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionStatus::set_has_currentmotionstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotionStatus::clear_has_currentmotionstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotionStatus::clear_currentmotionstate() {
  currentmotionstate_ = 0u;
  clear_has_currentmotionstate();
}
inline ::google::protobuf::uint32 MotionStatus::currentmotionstate() const {
  return currentmotionstate_;
}
inline void MotionStatus::set_currentmotionstate(::google::protobuf::uint32 value) {
  set_has_currentmotionstate();
  currentmotionstate_ = value;
}

// required .naothmessages.Pose2D plannedMotionLeftFoot = 6;
inline bool MotionStatus::has_plannedmotionleftfoot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionStatus::set_has_plannedmotionleftfoot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MotionStatus::clear_has_plannedmotionleftfoot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MotionStatus::clear_plannedmotionleftfoot() {
  if (plannedmotionleftfoot_ != NULL) plannedmotionleftfoot_->::naothmessages::Pose2D::Clear();
  clear_has_plannedmotionleftfoot();
}
inline const ::naothmessages::Pose2D& MotionStatus::plannedmotionleftfoot() const {
  return plannedmotionleftfoot_ != NULL ? *plannedmotionleftfoot_ : *default_instance_->plannedmotionleftfoot_;
}
inline ::naothmessages::Pose2D* MotionStatus::mutable_plannedmotionleftfoot() {
  set_has_plannedmotionleftfoot();
  if (plannedmotionleftfoot_ == NULL) plannedmotionleftfoot_ = new ::naothmessages::Pose2D;
  return plannedmotionleftfoot_;
}
inline ::naothmessages::Pose2D* MotionStatus::release_plannedmotionleftfoot() {
  clear_has_plannedmotionleftfoot();
  ::naothmessages::Pose2D* temp = plannedmotionleftfoot_;
  plannedmotionleftfoot_ = NULL;
  return temp;
}

// required .naothmessages.Pose2D plannedMotionRightFoot = 7;
inline bool MotionStatus::has_plannedmotionrightfoot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MotionStatus::set_has_plannedmotionrightfoot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MotionStatus::clear_has_plannedmotionrightfoot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MotionStatus::clear_plannedmotionrightfoot() {
  if (plannedmotionrightfoot_ != NULL) plannedmotionrightfoot_->::naothmessages::Pose2D::Clear();
  clear_has_plannedmotionrightfoot();
}
inline const ::naothmessages::Pose2D& MotionStatus::plannedmotionrightfoot() const {
  return plannedmotionrightfoot_ != NULL ? *plannedmotionrightfoot_ : *default_instance_->plannedmotionrightfoot_;
}
inline ::naothmessages::Pose2D* MotionStatus::mutable_plannedmotionrightfoot() {
  set_has_plannedmotionrightfoot();
  if (plannedmotionrightfoot_ == NULL) plannedmotionrightfoot_ = new ::naothmessages::Pose2D;
  return plannedmotionrightfoot_;
}
inline ::naothmessages::Pose2D* MotionStatus::release_plannedmotionrightfoot() {
  clear_has_plannedmotionrightfoot();
  ::naothmessages::Pose2D* temp = plannedmotionrightfoot_;
  plannedmotionrightfoot_ = NULL;
  return temp;
}

// required .naothmessages.Pose2D plannedMotionHip = 8;
inline bool MotionStatus::has_plannedmotionhip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MotionStatus::set_has_plannedmotionhip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MotionStatus::clear_has_plannedmotionhip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MotionStatus::clear_plannedmotionhip() {
  if (plannedmotionhip_ != NULL) plannedmotionhip_->::naothmessages::Pose2D::Clear();
  clear_has_plannedmotionhip();
}
inline const ::naothmessages::Pose2D& MotionStatus::plannedmotionhip() const {
  return plannedmotionhip_ != NULL ? *plannedmotionhip_ : *default_instance_->plannedmotionhip_;
}
inline ::naothmessages::Pose2D* MotionStatus::mutable_plannedmotionhip() {
  set_has_plannedmotionhip();
  if (plannedmotionhip_ == NULL) plannedmotionhip_ = new ::naothmessages::Pose2D;
  return plannedmotionhip_;
}
inline ::naothmessages::Pose2D* MotionStatus::release_plannedmotionhip() {
  clear_has_plannedmotionhip();
  ::naothmessages::Pose2D* temp = plannedmotionhip_;
  plannedmotionhip_ = NULL;
  return temp;
}

// optional .naothmessages.StepControlStatus stepControlStatus = 9;
inline bool MotionStatus::has_stepcontrolstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MotionStatus::set_has_stepcontrolstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MotionStatus::clear_has_stepcontrolstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MotionStatus::clear_stepcontrolstatus() {
  if (stepcontrolstatus_ != NULL) stepcontrolstatus_->::naothmessages::StepControlStatus::Clear();
  clear_has_stepcontrolstatus();
}
inline const ::naothmessages::StepControlStatus& MotionStatus::stepcontrolstatus() const {
  return stepcontrolstatus_ != NULL ? *stepcontrolstatus_ : *default_instance_->stepcontrolstatus_;
}
inline ::naothmessages::StepControlStatus* MotionStatus::mutable_stepcontrolstatus() {
  set_has_stepcontrolstatus();
  if (stepcontrolstatus_ == NULL) stepcontrolstatus_ = new ::naothmessages::StepControlStatus;
  return stepcontrolstatus_;
}
inline ::naothmessages::StepControlStatus* MotionStatus::release_stepcontrolstatus() {
  clear_has_stepcontrolstatus();
  ::naothmessages::StepControlStatus* temp = stepcontrolstatus_;
  stepcontrolstatus_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// OdometryData

// required .naothmessages.Pose2D pose = 1;
inline bool OdometryData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OdometryData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OdometryData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OdometryData::clear_pose() {
  if (pose_ != NULL) pose_->::naothmessages::Pose2D::Clear();
  clear_has_pose();
}
inline const ::naothmessages::Pose2D& OdometryData::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::naothmessages::Pose2D* OdometryData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::naothmessages::Pose2D;
  return pose_;
}
inline ::naothmessages::Pose2D* OdometryData::release_pose() {
  clear_has_pose();
  ::naothmessages::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CalibrationData

// optional .naothmessages.DoubleVector2 inertialSensorOffset = 1;
inline bool CalibrationData::has_inertialsensoroffset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalibrationData::set_has_inertialsensoroffset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalibrationData::clear_has_inertialsensoroffset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalibrationData::clear_inertialsensoroffset() {
  if (inertialsensoroffset_ != NULL) inertialsensoroffset_->::naothmessages::DoubleVector2::Clear();
  clear_has_inertialsensoroffset();
}
inline const ::naothmessages::DoubleVector2& CalibrationData::inertialsensoroffset() const {
  return inertialsensoroffset_ != NULL ? *inertialsensoroffset_ : *default_instance_->inertialsensoroffset_;
}
inline ::naothmessages::DoubleVector2* CalibrationData::mutable_inertialsensoroffset() {
  set_has_inertialsensoroffset();
  if (inertialsensoroffset_ == NULL) inertialsensoroffset_ = new ::naothmessages::DoubleVector2;
  return inertialsensoroffset_;
}
inline ::naothmessages::DoubleVector2* CalibrationData::release_inertialsensoroffset() {
  clear_has_inertialsensoroffset();
  ::naothmessages::DoubleVector2* temp = inertialsensoroffset_;
  inertialsensoroffset_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector2 gyroSensorOffset = 2;
inline bool CalibrationData::has_gyrosensoroffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalibrationData::set_has_gyrosensoroffset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalibrationData::clear_has_gyrosensoroffset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalibrationData::clear_gyrosensoroffset() {
  if (gyrosensoroffset_ != NULL) gyrosensoroffset_->::naothmessages::DoubleVector2::Clear();
  clear_has_gyrosensoroffset();
}
inline const ::naothmessages::DoubleVector2& CalibrationData::gyrosensoroffset() const {
  return gyrosensoroffset_ != NULL ? *gyrosensoroffset_ : *default_instance_->gyrosensoroffset_;
}
inline ::naothmessages::DoubleVector2* CalibrationData::mutable_gyrosensoroffset() {
  set_has_gyrosensoroffset();
  if (gyrosensoroffset_ == NULL) gyrosensoroffset_ = new ::naothmessages::DoubleVector2;
  return gyrosensoroffset_;
}
inline ::naothmessages::DoubleVector2* CalibrationData::release_gyrosensoroffset() {
  clear_has_gyrosensoroffset();
  ::naothmessages::DoubleVector2* temp = gyrosensoroffset_;
  gyrosensoroffset_ = NULL;
  return temp;
}

// optional .naothmessages.DoubleVector3 accSensorOffset = 3;
inline bool CalibrationData::has_accsensoroffset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalibrationData::set_has_accsensoroffset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalibrationData::clear_has_accsensoroffset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalibrationData::clear_accsensoroffset() {
  if (accsensoroffset_ != NULL) accsensoroffset_->::naothmessages::DoubleVector3::Clear();
  clear_has_accsensoroffset();
}
inline const ::naothmessages::DoubleVector3& CalibrationData::accsensoroffset() const {
  return accsensoroffset_ != NULL ? *accsensoroffset_ : *default_instance_->accsensoroffset_;
}
inline ::naothmessages::DoubleVector3* CalibrationData::mutable_accsensoroffset() {
  set_has_accsensoroffset();
  if (accsensoroffset_ == NULL) accsensoroffset_ = new ::naothmessages::DoubleVector3;
  return accsensoroffset_;
}
inline ::naothmessages::DoubleVector3* CalibrationData::release_accsensoroffset() {
  clear_has_accsensoroffset();
  ::naothmessages::DoubleVector3* temp = accsensoroffset_;
  accsensoroffset_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// InertialModel

// optional .naothmessages.DoubleVector2 orientation = 1;
inline bool InertialModel::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InertialModel::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InertialModel::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InertialModel::clear_orientation() {
  if (orientation_ != NULL) orientation_->::naothmessages::DoubleVector2::Clear();
  clear_has_orientation();
}
inline const ::naothmessages::DoubleVector2& InertialModel::orientation() const {
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::naothmessages::DoubleVector2* InertialModel::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::naothmessages::DoubleVector2;
  return orientation_;
}
inline ::naothmessages::DoubleVector2* InertialModel::release_orientation() {
  clear_has_orientation();
  ::naothmessages::DoubleVector2* temp = orientation_;
  orientation_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naothmessages

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Representations_2eproto__INCLUDED
